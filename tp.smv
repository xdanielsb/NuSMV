-- ONE CLIENT - ONE SERVER 

MODULE Server(msg)
  VAR
    --sending: boolean;
    --receiving: boolean;
    mode : { passive, active, connected };
  ASSIGN
    init(mode) := passive;
    next(mode) := case 
      mode = passive & msg = syn: active;
      mode = active & msg = ack: connected;
      mode = active : active;
      mode = connected : connected;
      TRUE: mode;
    esac;
  DEFINE
    synack := mode=active & msg=ack;

MODULE Client(synack)
  VAR
    state : {connected, disconnected};
    msg : {syn, ack};
  ASSIGN
    init(state):= disconnected;
    next(state):= case
      synack: connected;
      state = connected: connected;
      TRUE: state;
    esac;

MODULE main
  VAR
    client1: process Client(server1.synack);
    server1: process Server(client1.msg);

-- Liveness Properties

-- The server can become connected
SPEC EF(server1.mode=connected);
-- From it is initial state, the server may eventually become connected
SPEC AG(server1.mode=passive -> EF server1.mode=connected)
-- IF the client send a message of syn the  next response of the server may eventually be synack
SPEC AG(client1.msg=syn & server1.mode=active -> EX server1.synack=TRUE)

--
--SPEC AG(client1.mode=active U client1.msg)


-- Safety Properties





